/*
* Alex Vance
* CEG 4350 Summer 2016
* Project 2: Paging Algorithms
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/*FIFO
*@param num_frames | number of frames user enters
*@param page_refs | array of frame inputs from user
*@param page_refs_size | size of page_refs array
*/
void fifo(int num_frames, int * page_refs, int page_refs_size){

int page_faults = 0;
int frames[num_frames];
int num_pages = page_refs_size;
int k, i, j;

//gather frames into array
for (i = 0; i < num_frames; i++){
  frames[i] = -1;
}

printf("\n FIFO output:\n");
for(i = 0; i < num_pages; i++){
    k = 0;

    //check if page fault
    for (j = 0; j < num_frames; j++){
      if(page_refs[i] == frames[j]){
        k++;
        page_faults--;
      }
    }
    //there was one
    page_faults++;

    //see if movement needs done for pages
    if(page_faults <= num_frames && k == 0) {
      frames[i] = page_refs[i];
    }else if(k == 0) {
      frames[(page_faults-1)% num_frames] = page_refs[i];
    }

    //output
    printf("\n");
     for(j=0;j<num_frames;j++){
        printf("%d\t",frames[j]);
     }
  }
  printf("\n");
  printf("\nTotal page faults: %d",page_faults);
}//end fifo

/*Optimal
*@param num_frames | number of frames user enters
*@param page_refs | array of frame inputs from user
*@param page_refs_size | size of page_refs array
*/
void optimal(int num_frames, int * page_refs, int page_refs_size){

int frames[num_frames];
int check_frame[num_frames];
int num_pages = page_refs_size;
int k = 0, i, j, t,q,f,max,x, check, temp, current, dist = 0, page_faults = 0;

//gather frames into array
for (i = 0; i < num_frames; i++){
  frames[i] = -1;
  check_frame[i] = 0;
}
printf("\n");
printf("\n Optimal output:\n");
//loop over algorithm for each page
for (i = 0; i < num_pages; i++){
check = 0;
temp = page_refs[i];
//check for each frame
for(j=0;j<num_frames;j++){
       if(temp==frames[j]){
          check=1;
          break;
       }
}

//need to perform movement
if( check == 0 && (k < num_frames)){
      page_faults++;
      frames[k]=temp;
      k++;
      }else if(check == 0 && (k == num_frames)){
         page_faults++;

         //check if exists in frame already
         for(j=0;j<num_frames;j++){
               current=frames[j];

               for(q=i;q<num_pages;q++){
                  if(current!=page_refs[q]){
                  check_frame[j]++;
                }else{
                  break;
                }
               }
            }
            max=0;

              //check for max value
               for(f=0;f<num_frames;f++){
                  if(check_frame[f]>max){
                     max=check_frame[f];
                     t=f;
                  }
               }


               frames[t]=temp;
            }

              //output
                printf("\n");
               for(x=0;x<num_frames;x++){
                  printf("%d\t",frames[x]);
               }
            }
            printf("\n");
            printf("\nTotal page faults: %d",page_faults);
}

/*LRU
*@param num_frames | number of frames user enters
*@param page_refs | array of frame inputs from user
*@param page_refs_size | size of page_refs array
*/
void lru(int num_frames, int * page_refs, int page_refs_size){

int frames[num_frames];
int check_frame[num_frames];
int num_pages = page_refs_size;
int k, i, j, h,x,flag1=0,flag2=0, page_faults = 0, index;

//gather frames into array
for (i = 0; i < num_frames; i++){
  frames[i] = -1;
}

printf("\n");
printf("\n LRU output:\n");

for (j = 0; j < page_refs_size; j++){
  flag1=0,flag2=0;
    for (i = 0; i < num_frames; i++) {
      if(frames[i] == page_refs[j]){
        flag1 = 1;
        flag2 = 1;
        break;
      }
    }
    if(flag1 == 0){
      for (i = 0; i < num_frames; i++) {
        if(frames[i] == -1){
          frames[i] = page_refs[j];
          flag2 = 1;
          break;
        }
      }
    }
    if(flag2 == 0){
      for (i = 0; i < num_frames; i++)
        check_frame[i] = 0;
        for (x = j-1,h = 1; h < num_frames-1; h++,x--){
          for (k = 0; k < num_frames; k++) {
            if(frames[k] == page_refs[x])
              check_frame[k] = 1;
          }
        }
        for (i = 0; i < num_frames; i++) {
          if(check_frame[i] == 0)
            index = i;

        }
        frames[index] = page_refs[j];
        page_faults++;
      }
      //output
        printf("\n");
        for (i = 0; i < num_frames; i++) {
          printf("%d\t", frames[i]);
        }
}
  //show total page faults
  printf("\n");
  printf("\nTotal Page Faults: %d\n", page_faults);
}

/*LFU
*@param num_frames | number of frames user enters
*@param page_refs | array of frame inputs from user
*@param page_refs_size | size of page_refs array
*/
void lfu(int num_frames, int * page_refs, int page_refs_size){
printf("\n");
printf("\n LRU output:\n");
printf("\nunimplemented");
}

/*MFU
*@param num_frames | number of frames user enters
*@param page_refs | array of frame inputs from user
*@param page_refs_size | size of page_refs array
*/
void mfu(int num_frames, int * page_refs, int page_refs_size){
  printf("\n");
  printf("\n MFU output:\n");
  printf("\nunimplemented");
}

//main method
int main(int argc, char *argv[]) {

  int num_frames;
  int page_refs[argc - 1];
  int page_refs_size;
  int i;

  //if arguments were provided get those values
  if(argc > 1){
    num_frames = atoi(argv[1]);

    //gather list of page references
    for(i = 2; i < argc; i++){
      page_refs[i-2] = atoi(argv[i]);
    }

    //save size of page_refs array for future access
    page_refs_size = (sizeof(page_refs)/ sizeof(page_refs[0]))-1;
  }

  fifo(num_frames, page_refs, page_refs_size);
  optimal(num_frames, page_refs, page_refs_size);
  lru(num_frames, page_refs, page_refs_size);
  lfu(num_frames, page_refs, page_refs_size);
  mfu(num_frames, page_refs, page_refs_size);
  return 0;
}
